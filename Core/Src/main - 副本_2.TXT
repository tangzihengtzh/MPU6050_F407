/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"
#include "i2c.h"
#include "sdio.h"
#include "usart.h"
#include "gpio.h"
#include "fsmc.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lcd.h"
#include "MPU.h"
#include "string.h"

#include "lcd.h"   // 假设 lcd.h 是你用来控制 LCD 的头文件
#include "sdio.h"




/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_FSMC_Init();
  MX_I2C1_Init();
  MX_USART1_Init();
  MX_SDIO_SD_Init();
  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
	lcd_init();
	mpu_init();
	//lcd_show_string(30, 50, 200, 16, 16, "starting", RED);

	while(create_and_write_txt() != 0)
	{
		lcd_show_string(0, 120, 200, 20, 32, "NO FAT32", RED);
	}


	int data_list[240];
	int data_list_diff[240];
	data_list[0]=0;
	unsigned int idx = 0;
	lcd_draw_line(0, 200, 239, 200,0x07FF);
	int state = 0;


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

//		while (1) {
//
//			//KEY_TEST
//			int ans_key_W =read_key_state('W');
//			char MSG_KEY_W[32];
//			sprintf(MSG_KEY_W, "KEY_W:%d", ans_key_W);
//			lcd_show_string(0, 0, 200, 20, 16, MSG_KEY_W, RED);
//
//			int ans_key_A =read_key_state('A');
//			char MSG_KEY_A[32];
//			sprintf(MSG_KEY_A, "KEY_A:%d", ans_key_A);
//			lcd_show_string(0, 20, 200, 20, 16, MSG_KEY_A, RED);
//
//			int ans_key_S =read_key_state('S');
//			char MSG_KEY_S[32];
//			sprintf(MSG_KEY_S, "KEY_S:%d", ans_key_S);
//			lcd_show_string(0, 40, 200, 20, 16, MSG_KEY_S, RED);
//
//			int ans_key_D =read_key_state('D');
//			char MSG_KEY_D[32];
//			sprintf(MSG_KEY_D, "KEY_D:%d", ans_key_D);
//			lcd_show_string(0, 60, 200, 20, 16, MSG_KEY_D, RED);
//
//		}
		int is_fir = 1;
		char cur_dir = 'x';
		char data_path[24] = "datax.txt";

		while(state == 0)
		{
			lcd_show_string(0, 0, 200, 20, 16, ">>>----<<<          ", BLACK);
			lcd_show_string(0, 20, 200, 20, 16, "MAIN MENU", BLUE);
			lcd_show_string(0, 40, 200, 20, 16, "[A:START]", BLACK);
			if(is_fir == 1)
			{
				lcd_show_string(0, 140, 200, 20, 16, "CUR DIR:X  ", 0xB9E0);
				is_fir = 0;
			}
			lcd_show_string(0, 60, 200, 20, 16, "[S:CHANGE DIR Y]", BLACK);
			lcd_show_string(0, 80, 200, 20, 16, "[W:CHANGE DIR Z]", BLACK);
			lcd_show_string(0, 100, 200, 20, 16, "[D:CHANGE DIR X]", BLACK);
			lcd_show_string(0, 120, 200, 20, 16, ">>>----<<<", BLACK);

			lcd_show_string(120, 240, 200, 20, 16, "---KEY SET---", BLACK);
			lcd_show_string(120, 260, 200, 20, 16, "        oW", BLACK);
			lcd_show_string(120, 285, 200, 20, 16, "oRST oA oS oD", BLACK);
			if(read_key_state('A') == 0)
			{
				while(read_key_state('A') == 0)
				{

				}
				lcd_fill(0, 0, 239, 319,0xFFFF);
				state = 1;
			}

			if(read_key_state('S') == 0)
			{
				lcd_show_string(0, 140, 200, 20, 16, " CUR DIR:Y  ", 0x045F);
				cur_dir = 'y';
				data_path[4]='y';
			}

			if(read_key_state('W') == 0)
			{
				lcd_show_string(0, 140, 200, 20, 16, "  CUR DIR:Z ", 0x05E0);
				cur_dir = 'z';
				data_path[4]='z';
			}

			if(read_key_state('D') == 0)
			{
				lcd_show_string(0, 140, 200, 20, 16, "CUR DIR:X  ", 0xB9E0);
				cur_dir = 'x';
				data_path[4]='x';
			}
		}
		static int sel_file = 2;
		while(state == 1)
		{
			int is_fr_s1 = 1;
			int is_SD = 1;
			if(is_fr_s1 == 1)
			{
				is_SD = create_and_write_txt();
				is_fr_s1 = 0;
			}
			if(is_SD != 0)
			{
				char MSG_SD[32];
				sprintf(MSG_SD, "SD_FAT32_WRONG:%d", is_SD);  // 显示两位小数
				lcd_show_string(0, 0, 200, 20, 16, MSG_SD, RED);

				lcd_fill(0, 20, 239, 319,0xFFFF);
				state = 0;
			}
			else
			{
				lcd_show_string(0, 0, 200, 20, 12, "W/S:SELECT FILE[A:OK][D:VIEW]", RED);
				lcd_show_string(120, 240, 200, 20, 16, "---KEY SET---", BLACK);
				lcd_show_string(120, 260, 200, 20, 16, "        oW", BLACK);
				lcd_show_string(120, 285, 200, 20, 16, "oRST oA oS oD", BLACK);
				int nums_file = display_sd_card_files();
				//state = 2;
				lcd_show_string(200, sel_file*12, 200, 20, 12, "<<<", BLUE);
				if(read_key_state('W') == 0)
				{
					if(sel_file > 1)
					{
						sel_file -= 1;
						lcd_fill(200, 12, 239, 319,0xFFFF);
						lcd_show_string(200, sel_file*12, 200, 20, 12, "<<<", BLUE);
						if(sel_file == 1)
						{
							lcd_fill(200, 12, 239, 319,0xFFFF);
							lcd_show_string(0, sel_file*12, 200, 20, 12, "NEW FILE", RED);
							lcd_show_string(200, sel_file*12, 200, 20, 12, "<<<", BLUE);
						}
					}
					while(read_key_state('W') == 0)
					{

					}
				}
				if(read_key_state('S') == 0)
				{
					if(sel_file < nums_file+1)
					{
						sel_file += 1;
						lcd_fill(200, 12, 239, 319,0xFFFF);
						lcd_show_string(200, sel_file*12, 200, 20, 12, "<<<", BLUE);
					}
					while(read_key_state('S') == 0)
					{

					}
				}
				if(read_key_state('A') == 0)
				{
					while(read_key_state('A') == 0)
					{

					}
					if(sel_file == 1)
					{
						int isOK_new_file = create_data_file(nums_file+1);
						if(isOK_new_file != 0)
						{
							lcd_fill(0, 12, 239, 319,0xFFFF);
							lcd_show_string(0, 0, 200, 20, 12, "File Create Failed", RED);
							lcd_show_string(0, 12, 200, 20, 12, "D:EXIT", RED);
							while(read_key_state('D') == 1)
							{

							}
						}
						else
						{
							snprintf(data_path, sizeof(data_path), "data%d.txt", nums_file+1);
							lcd_fill(0, 0, 239, 319,0xFFFF);
							state = 2;
						}
					}
					else
					{
						//char sel_file_name[24];
						get_file_name_by_index(sel_file-2, data_path);
						lcd_fill(0, 0, 239, 319,0xFFFF);
						//lcd_show_string(0, 12, 200, 20, 12, sel_file_name, RED);
						state = 2;
					}
				}
				if(read_key_state('D') == 0)
				{
					while(read_key_state('D') == 0)
					{

					}
					lcd_fill(0, 0, 239, 319,0xFFFF);
					state = 4;
				}

			}
		}

		if(state == 4)
		{

			static int start_line = 0;
			display_file_first_10_lines(sel_file-2,start_line);
			lcd_show_string(0, 0, 200, 20, 12, "[D:EXIT][S:NETX PAGE][W:LAST PAGE]", RED);

			lcd_show_string(120, 240, 200, 20, 16, "---KEY SET---", BLACK);
			lcd_show_string(120, 260, 200, 20, 16, "        oW", BLACK);
			lcd_show_string(120, 285, 200, 20, 16, "oRST oA oS oD", BLACK);

			char title[]="PAGE:    ";
			snprintf(title, sizeof(title), "PAGE:%d", start_line/24+1);
			lcd_show_string(0, 12, 200, 20, 12, title, RED);

			if(read_key_state('D') == 0)
			{
				while(read_key_state('D') == 0)
				{

				}
				start_line = 0;
				lcd_fill(0, 0, 239, 319,0xFFFF);
				state = 1;
			}
			if(read_key_state('S') == 0)
			{
				while(read_key_state('S') == 0)
				{

				}
				lcd_fill(0, 0, 239, 319,0xFFFF);
				start_line += 24;
			}
			if(read_key_state('W') == 0)
			{
				while(read_key_state('W') == 0)
				{

				}
				lcd_fill(0, 0, 239, 319,0xFFFF);
				if(start_line >= 24)
				{
					start_line -= 24;
				}
			}
		}

		// 默认 cur_dir = 'x'，可以为 'y' 或 'z'
		while(state == 2)
		{
		    idx = (idx + 1) % 240;
		    int sum = 0;
		    int16_t A = 0;  // 加速度值，根据方向动态获取
		    for(int j = 0; j < 10; j++)
		    {
		        // 根据 cur_dir 读取指定方向的加速度数据
		        if(cur_dir == 'x')
		        {
		            A = MPU_Read_Accel_X();
		        }
		        else if(cur_dir == 'y')
		        {
		            A = MPU_Read_Accel_Y();
		        }
		        else if(cur_dir == 'z')
		        {
		            A = MPU_Read_Accel_Z();
		        }
		        sum += A;
		    }
		    float acc = sum / 10.0;
		    char acc_show[16];
		    float accel_in_g = acc / 16384.0;

		    // 根据 cur_dir 显示不同的轴信息
		    if(cur_dir == 'x')
		    {
		        sprintf(acc_show, "X: %.4f g", accel_in_g);
		    }
		    else if(cur_dir == 'y')
		    {
		        sprintf(acc_show, "Y: %.4f g", accel_in_g);
		    }
		    else if(cur_dir == 'z')
		    {
		        sprintf(acc_show, "Z: %.4f g", accel_in_g);
		    }

		    data_list[idx] = (int)(1000 * accel_in_g);
		    if(idx > 1)
		    {
		        data_list_diff[idx] = data_list[idx] - data_list[idx - 1];
		    }

		    uint16_t color = 0x001F;

		    if(idx > 10 && idx < 230)
		    {
		        lcd_draw_line(idx - 1, 200 - data_list_diff[idx - 1], idx, 200 - data_list_diff[idx], color);

		        uint8_t tdata[16];
		        // 串口传输
		        // sprintf(tdata, "%d\n", data_list_diff[idx]);
		        // HAL_USART_Transmit(&husart1, tdata, strlen(tdata), 1000); // 只发送实际有效数据的长度
		    }
		    else
		    {
		        if(idx == 235)
		        {
		            lcd_fill(0, 0, 239, 319, 0xFFFF);

		            for(int k = 0; k < 6; k++)
		            {
		                lcd_draw_line(5, 170 + 10 * k, 234, 170 + 10 * k, 0x07FF);
		            }
		            lcd_draw_line(5, 170, 5, 220, 0x07FF);
		            lcd_draw_line(234, 170, 234, 220, 0x07FF);
		        }
		    }

		    lcd_show_string(0, 0, 200, 16, 16, data_path, BLUE);
		    lcd_show_string(0, 20, 200, 16, 16, acc_show, BLUE);
		    //lcd_show_string(0, 0, 200, 16, 12, "PRESS RST TO STOP", RED);



//		    if(cur_dir == 'x')
//		    {
//		    	read_and_append_txt_line("datax.txt", acc_show);
//		    }
//		    else if(cur_dir == 'y')
//		    {
//		    	read_and_append_txt_line("datay.txt", acc_show);
//		    }
//		    else if(cur_dir == 'z')
//		    {
//		    	read_and_append_txt_line("dataz.txt", acc_show);
//		    }

		    read_and_append_txt_line(data_path, acc_show);

//		    if(read_key_state('D') == 0)
//		    {
//		        lcd_fill(0, 0, 239, 319, 0xFFFF);
//		        state = 0;
//		    }
		}


//		cur_dir = 'x'
//		while(state == 2)
//		{
//			idx = (idx+1) % 240;
//			int sum = 0;
//			int16_t X_A = 0;
//			for(int j=0;j<10;j++)
//			{
//				X_A = MPU_Read_Accel_X();
//				sum+=X_A;
//			}
//			float acc = sum/10;
//			char x_show[16];
//			float accel_x_in_g = acc / 16384.0;
//			sprintf(x_show, "X: %.4f g", accel_x_in_g);  // 显示两位小数
//			data_list[idx] = (int)(1000*accel_x_in_g);
//			if(idx >1)
//			{
//				data_list_diff[idx] = data_list[idx]-data_list[idx-1];
//			}
//
//			uint16_t color =0x001F;
//	//		lcd_draw_point(idx, data_list[idx]+200, color);
//			if(idx>10 && idx<230)
//			{
//
//				lcd_draw_line(idx-1, 200-data_list_diff[idx-1],  idx, 200-data_list_diff[idx], color);
//
//
//				uint8_t tdata[16];
//	//			sprintf(tdata,"DATA:%d\n",data_list_diff[idx]);
//
//				//串口传输
//				//sprintf(tdata,"%d\n",data_list_diff[idx]);
//				//HAL_USART_Transmit(&husart1, tdata, strlen(tdata), 1000); // 只发送实际有效数据的长度
//
//			}
//			else
//			{
//				if(idx == 235)
//				{
//					lcd_fill(0, 0, 239, 319,0xFFFF);
//
//					for(int k=0;k<6;k++)
//					{
//						lcd_draw_line(5, 170+10*k, 234, 170+10*k,0x07FF);
//					}
//					lcd_draw_line(5, 170, 5, 220,0x07FF);
//					lcd_draw_line(234, 170, 234, 220,0x07FF);
//				}
//			}
//
//
//
//			lcd_show_string(0, 20, 200, 16, 16, x_show, BLUE);
//			lcd_show_string(0, 0, 200, 16, 16, "PRESS D TO STOP", RED);
//			read_and_append_txt_line("data.txt", x_show);
//
//			if(read_key_state('D') == 0)
//			{
//				lcd_fill(0, 0, 239, 319,0xFFFF);
//				state = 0;
//			}
//
//		}



    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
